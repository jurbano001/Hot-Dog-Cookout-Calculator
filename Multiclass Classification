{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jurbano001/Hot-Dog-Cookout-Calculator/blob/main/Multiclass%20Classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Multiclass Classification"
      ],
      "metadata": {
        "id": "3wJhWMDMZjda"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ogsKVKyVUI08"
      },
      "outputs": [],
      "source": [
        "# mlp for multiclass\n",
        "from numpy import sqrt\n",
        "import pandas as pd\n",
        "from pandas import read_csv\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from sklearn.preprocessing import LabelEncoder"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/avocado.csv',header=None)\n",
        "\n",
        "column_names = ['INDEX', 'DATE', 'AVG_PRICE', 'TOTAL_VOLUME', 'PLU_4046', 'PLU_4225', 'PLU_4770', 'TOTAL_BAGS', 'SMALL_BAGS', 'LARGE_BAGS', 'XL_BAGS', 'TYPE', 'YEAR', 'REGION']\n",
        "df.columns = column_names\n",
        "\n",
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r9yKsGm5U5aV",
        "outputId": "eae54b29-b432-4e57-a29f-5f347ef0a7d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   INDEX        DATE     AVG_PRICE  TOTAL_VOLUME  PLU_4046   PLU_4225  \\\n",
              "0    NaN        Date  AveragePrice  Total Volume   4046.00    4225.00   \n",
              "1    0.0  2015-12-27          1.33      64236.62   1036.74   54454.85   \n",
              "2    1.0  2015-12-20          1.35      54876.98    674.28   44638.81   \n",
              "3    2.0  2015-12-13          0.93     118220.22    794.70  109149.67   \n",
              "4    3.0  2015-12-06          1.08      78992.15   1132.00   71976.41   \n",
              "\n",
              "   PLU_4770  TOTAL_BAGS  SMALL_BAGS  LARGE_BAGS      XL_BAGS          TYPE  \\\n",
              "0   4770.00  Total Bags  Small Bags  Large Bags  XLarge Bags          type   \n",
              "1     48.16     8696.87     8603.62       93.25          0.0  conventional   \n",
              "2     58.33     9505.56     9408.07       97.49          0.0  conventional   \n",
              "3    130.50     8145.35     8042.21      103.14          0.0  conventional   \n",
              "4     72.58     5811.16      5677.4      133.76          0.0  conventional   \n",
              "\n",
              "   YEAR  REGION  \n",
              "0  year  region  \n",
              "1  2015  Albany  \n",
              "2  2015  Albany  \n",
              "3  2015  Albany  \n",
              "4  2015  Albany  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09df88fb-7252-4521-9f18-cce7c0824661\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>INDEX</th>\n",
              "      <th>DATE</th>\n",
              "      <th>AVG_PRICE</th>\n",
              "      <th>TOTAL_VOLUME</th>\n",
              "      <th>PLU_4046</th>\n",
              "      <th>PLU_4225</th>\n",
              "      <th>PLU_4770</th>\n",
              "      <th>TOTAL_BAGS</th>\n",
              "      <th>SMALL_BAGS</th>\n",
              "      <th>LARGE_BAGS</th>\n",
              "      <th>XL_BAGS</th>\n",
              "      <th>TYPE</th>\n",
              "      <th>YEAR</th>\n",
              "      <th>REGION</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Date</td>\n",
              "      <td>AveragePrice</td>\n",
              "      <td>Total Volume</td>\n",
              "      <td>4046.00</td>\n",
              "      <td>4225.00</td>\n",
              "      <td>4770.00</td>\n",
              "      <td>Total Bags</td>\n",
              "      <td>Small Bags</td>\n",
              "      <td>Large Bags</td>\n",
              "      <td>XLarge Bags</td>\n",
              "      <td>type</td>\n",
              "      <td>year</td>\n",
              "      <td>region</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>2015-12-27</td>\n",
              "      <td>1.33</td>\n",
              "      <td>64236.62</td>\n",
              "      <td>1036.74</td>\n",
              "      <td>54454.85</td>\n",
              "      <td>48.16</td>\n",
              "      <td>8696.87</td>\n",
              "      <td>8603.62</td>\n",
              "      <td>93.25</td>\n",
              "      <td>0.0</td>\n",
              "      <td>conventional</td>\n",
              "      <td>2015</td>\n",
              "      <td>Albany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2015-12-20</td>\n",
              "      <td>1.35</td>\n",
              "      <td>54876.98</td>\n",
              "      <td>674.28</td>\n",
              "      <td>44638.81</td>\n",
              "      <td>58.33</td>\n",
              "      <td>9505.56</td>\n",
              "      <td>9408.07</td>\n",
              "      <td>97.49</td>\n",
              "      <td>0.0</td>\n",
              "      <td>conventional</td>\n",
              "      <td>2015</td>\n",
              "      <td>Albany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.0</td>\n",
              "      <td>2015-12-13</td>\n",
              "      <td>0.93</td>\n",
              "      <td>118220.22</td>\n",
              "      <td>794.70</td>\n",
              "      <td>109149.67</td>\n",
              "      <td>130.50</td>\n",
              "      <td>8145.35</td>\n",
              "      <td>8042.21</td>\n",
              "      <td>103.14</td>\n",
              "      <td>0.0</td>\n",
              "      <td>conventional</td>\n",
              "      <td>2015</td>\n",
              "      <td>Albany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.0</td>\n",
              "      <td>2015-12-06</td>\n",
              "      <td>1.08</td>\n",
              "      <td>78992.15</td>\n",
              "      <td>1132.00</td>\n",
              "      <td>71976.41</td>\n",
              "      <td>72.58</td>\n",
              "      <td>5811.16</td>\n",
              "      <td>5677.4</td>\n",
              "      <td>133.76</td>\n",
              "      <td>0.0</td>\n",
              "      <td>conventional</td>\n",
              "      <td>2015</td>\n",
              "      <td>Albany</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09df88fb-7252-4521-9f18-cce7c0824661')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-09df88fb-7252-4521-9f18-cce7c0824661 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-09df88fb-7252-4521-9f18-cce7c0824661');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "46Wmz9Z0VAHl",
        "outputId": "ff3c31aa-b553-4919-efc6-3d7e914c20b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 18250 entries, 0 to 18249\n",
            "Data columns (total 14 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   INDEX         18249 non-null  float64\n",
            " 1   DATE          18250 non-null  object \n",
            " 2   AVG_PRICE     18250 non-null  object \n",
            " 3   TOTAL_VOLUME  18250 non-null  object \n",
            " 4   PLU_4046      18250 non-null  float64\n",
            " 5   PLU_4225      18250 non-null  float64\n",
            " 6   PLU_4770      18250 non-null  float64\n",
            " 7   TOTAL_BAGS    18250 non-null  object \n",
            " 8   SMALL_BAGS    18250 non-null  object \n",
            " 9   LARGE_BAGS    18250 non-null  object \n",
            " 10  XL_BAGS       18250 non-null  object \n",
            " 11  TYPE          18250 non-null  object \n",
            " 12  YEAR          18250 non-null  object \n",
            " 13  REGION        18250 non-null  object \n",
            "dtypes: float64(4), object(10)\n",
            "memory usage: 1.9+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.dropna()"
      ],
      "metadata": {
        "id": "hcH7IEwdVJDk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# drop date column\n",
        "\n",
        "df = df.drop('DATE', axis=1)"
      ],
      "metadata": {
        "id": "TS9S3FVUVNcI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# drop year column\n",
        "\n",
        "df = df.drop('YEAR', axis=1)"
      ],
      "metadata": {
        "id": "S9z8CpavVrnY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T84QG9hBV3hO",
        "outputId": "ec2265d2-998e-44ac-9d65-65caadd91808"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 18249 entries, 1 to 18249\n",
            "Data columns (total 12 columns):\n",
            " #   Column        Non-Null Count  Dtype  \n",
            "---  ------        --------------  -----  \n",
            " 0   INDEX         18249 non-null  float64\n",
            " 1   AVG_PRICE     18249 non-null  object \n",
            " 2   TOTAL_VOLUME  18249 non-null  object \n",
            " 3   PLU_4046      18249 non-null  float64\n",
            " 4   PLU_4225      18249 non-null  float64\n",
            " 5   PLU_4770      18249 non-null  float64\n",
            " 6   TOTAL_BAGS    18249 non-null  object \n",
            " 7   SMALL_BAGS    18249 non-null  object \n",
            " 8   LARGE_BAGS    18249 non-null  object \n",
            " 9   XL_BAGS       18249 non-null  object \n",
            " 10  TYPE          18249 non-null  object \n",
            " 11  REGION        18249 non-null  object \n",
            "dtypes: float64(4), object(8)\n",
            "memory usage: 1.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# split into input and output columns\n",
        "X, y = df.values[:, :-2], df.values[:, -2]"
      ],
      "metadata": {
        "id": "WM-P0ZuAb-ug"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ensure all data are floating point values\n",
        "X = X.astype('float32')"
      ],
      "metadata": {
        "id": "1Yzbzc-FXEdt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y17qkGpTXIil",
        "outputId": "5fbe3d15-e4e1-4f96-b1c1-cd5c9fc9997e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['conventional', 'conventional', 'conventional', ..., 'organic',\n",
              "       'organic', 'organic'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# encode strings to integer\n",
        "y = LabelEncoder().fit_transform(y)"
      ],
      "metadata": {
        "id": "uQV3D8puXKMF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kdfhqyJHbRLR",
        "outputId": "ed22013f-aff8-44be-bc15-098bbaff835d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, ..., 1, 1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# split into train and test datasets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\n",
        "print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xp5_eR26XM14",
        "outputId": "c1f90807-754f-4a76-d8db-26cdb4c45fbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(12226, 10) (6023, 10) (12226,) (6023,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# determine the number of input features\n",
        "n_features = X_train.shape[1]\n",
        "n_features"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZKRbLlWYXOyU",
        "outputId": "ffa9f652-970b-4d45-fbc4-fe7415c3b363"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# define model\n",
        "model = Sequential()\n",
        "model.add(Dense(10, activation='relu', kernel_initializer='he_normal', input_shape=(n_features,)))\n",
        "model.add(Dense(8, activation='relu', kernel_initializer='he_normal'))\n",
        "model.add(Dense(3, activation='softmax'))  # because this is multiclass - softmax is the preferred activation function on the output layer"
      ],
      "metadata": {
        "id": "CbTV9Gp-XT_-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# compile the model\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "8SkfeMCvXYXH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# fit the model\n",
        "model.fit(X_train, y_train, epochs=150, batch_size=32, verbose=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Upe24K8XgHj",
        "outputId": "ba46c8dd-6a6e-4c68-fa3f-dbee121f79d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f48dc9cf010>"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import argmax\n",
        "# evaluate the model\n",
        "loss, acc = model.evaluate(X_test, y_test, verbose=0)\n",
        "print('Test Accuracy: %.3f' % acc)\n",
        "# make a prediction\n",
        "row = [0.1,13.5,1.4,12.2,2.1,3.4,5.5,8.7,11.1,12.3]\n",
        "yhat = model.predict([row])\n",
        "print('Predicted: %s (class=%d)' % (yhat, argmax(yhat)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gjkErty-XiBi",
        "outputId": "d89b4038-aa9d-4fb2-9091-4928ec22f110"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 0.927\n",
            "1/1 [==============================] - 0s 88ms/step\n",
            "Predicted: [[3.922465e-11 1.000000e+00 0.000000e+00]] (class=1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model predicts a probability distribution over three classes. \n",
        "\n",
        "The predicted probabilities are [3.922465e-11, 1.0000000e+00, 0.0000000e+00]. \n",
        "\n",
        "The highest probability corresponds to class 1 (Organic), indicating that the model predicts the input row to belong to class 1 (Organic). The argmax function is then used to determine the class with the highest probability, which in this case is 1 (Organic).\n",
        "\n",
        "In summary, the model achieves a test accuracy of 92.7% and predicts the input row to belong to class 1 (Organic) with a high probability."
      ],
      "metadata": {
        "id": "q9NHuoBjZYm8"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5A6vd4a7bbJU"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}